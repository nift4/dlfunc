plugins {
    id 'com.android.library'
}

import java.nio.file.Paths

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        externalNativeBuild {
            cmake {
                arguments "-DANDROID_STL=none"
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    ndkVersion '22.1.7171670'
    buildToolsVersion '29.0.2'
    externalNativeBuild {
        cmake {
            path 'CMakeLists.txt'
        }
    }

    buildFeatures {
        prefabPublishing true
    }

    prefab {
        dlfunc {
            headers 'src/main/jni/include'
        }
    }

}


afterEvaluate {
    def d8_path = file(Paths.get(android.properties.get("sdkDirectory").absolutePath,
            "build-tools", android.buildToolsRevision.toString(), "d8")).absolutePath

    android.libraryVariants.all { variant ->
        def buildType
        def d8_flag
        switch (variant.buildType.name) {
            case "debug":
                buildType = "Debug"
                d8_flag = "--debug"
                break
            case "release":
                buildType = "Release"
                d8_flag = "--release"
                break
            default:
                println variant.buildType.name
        }

        println buildType
        def generateDexTask = tasks.register("generateDex${buildType}") {
            dependsOn "compile${buildType}JavaWithJavac"
            doLast {
                exec {
                    executable d8_path
                    args file(new File(
                            tasks.named("compile${buildType}JavaWithJavac").get().destinationDir,
                            "lab/galaxy/dlfunc/JNIHelper.class")).absolutePath,
                            d8_flag
                }
                exec {
                    // generate header for the dex file content
                    executable "xxd"
                    args "-i", "classes.dex", "src/main/jni/JNIHelper_dex.h"
                }
            }
        }
        tasks.named("externalNativeBuild${buildType}").get().dependsOn(generateDexTask)
    }
}


dependencies {
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}