plugins {
    id 'com.android.library'
    id 'signing'
    id "com.vanniktech.maven.publish" version "0.30.0"
}

import java.nio.file.Paths

android {
    compileSdk 35

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 35
        versionCode 1
        versionName "1.0"
        namespace "lab.galaxy.dlfunc"

        consumerProguardFiles "consumer-rules.pro"

        externalNativeBuild {
            cmake {
                arguments "-DANDROID_STL=none"
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    ndkVersion '22.1.7171670'
    externalNativeBuild {
        cmake {
            path 'CMakeLists.txt'
        }
    }

    buildFeatures {
        prefabPublishing true
    }

    prefab {
        dlfunc {
            headers 'src/main/jni/include'
        }
    }

}


afterEvaluate {
    def d8_path = file(Paths.get(android.properties.get("sdkDirectory").absolutePath,
            "build-tools", android.buildToolsRevision.toString(), "d8")).absolutePath

    android.libraryVariants.configureEach { variant ->
        def buildType
        def d8_flag
        switch (variant.buildType.name) {
            case "debug":
                buildType = "Debug"
                d8_flag = "--debug"
                break
            case "release":
                buildType = "Release"
                d8_flag = "--release"
                break
            default:
                println variant.buildType.name
        }

        println buildType
        def generateDexTask = tasks.register("generateDex${buildType}") {
            dependsOn "compile${buildType}JavaWithJavac"
            doLast {
                def f = new File(tasks.named("compile${buildType}JavaWithJavac").get().destinationDir.parent, "classes32")
                f.mkdir()
                exec {
                    executable d8_path
                    args file(new File(
                            tasks.named("compile${buildType}JavaWithJavac").get().destinationDir,
                            "dlfunc32.class")).absolutePath,
                            d8_flag, "--output", f.absolutePath
                }
                def f2 = new File(f.parent, "classes64")
                f2.mkdir()
                exec {
                    executable d8_path
                    args file(new File(
                            tasks.named("compile${buildType}JavaWithJavac").get().destinationDir,
                            "dlfunc64.class")).absolutePath,
                            d8_flag, "--output", f2.absolutePath
                }
                exec {
                    // generate header for the dex file content
                    executable "xxd"
                    args "-i", "-n", "classes_dex", "${f.absolutePath}/classes.dex", "src/main/jni/JNIHelper_dex32.h"
                }
                exec {
                    // generate header for the dex file content
                    executable "xxd"
                    args "-i", "-n", "classes_dex", "${f2.absolutePath}/classes.dex", "src/main/jni/JNIHelper_dex64.h"
                }
            }
        }
        //tasks.named("externalNativeBuild${buildType}").get().dependsOn(generateDexTask)
        if (buildType.toString() == "Release")
            tasks.configureEach {
                if (it.name.startsWith("buildCMakeRel"))
                    it.dependsOn(generateDexTask)
            }
    }
}


dependencies {
    /*testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'*/
}

import com.vanniktech.maven.publish.AndroidSingleVariantLibrary
import com.vanniktech.maven.publish.SonatypeHost


signing {
    useGpgCmd()
}


mavenPublishing {
    // the first parameter represents which variant is published
    // the second whether to publish a sources jar
    // the third whether to publish a javadoc jar
    android.libraryVariants.configureEach { println it }
    configure(new AndroidSingleVariantLibrary("release", true, true))
    publishToMavenCentral(SonatypeHost.CENTRAL_PORTAL)
    signAllPublications()
    coordinates("io.github.nift4.dlfunc", "dlfunc", "0.1.4")

    pom {
        name = "dlfunc"
        description = " Bypass dynamic linking function restriction on Android by forging caller address (based on dlfunc by rk700)"
        inceptionYear = "2025"
        url = "https://github.com/nift4/dlfunc/"
        licenses {
            license {
                name = "The Apache License, Version 2.0"
                url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                distribution = "http://www.apache.org/licenses/LICENSE-2.0.txt"
            }
        }
        developers {
            developer {
                id = "nift4"
                name = "Nick"
                url = "https://github.com/nift4/"
            }
        }
        scm {
            url = "https://github.com/nift4/dlfunc"
            connection = "scm:git:https://github.com/nift4/dlfunc.git"
            developerConnection = "scm:git:ssh://git@github.com/nift4/dlfunc.git"
        }
    }
}